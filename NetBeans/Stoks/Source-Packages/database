package database;

import java.sql.SQLException;
import entities.Branch;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

public class BranchManipulations {

    //Add
    public static boolean addNewBranch(Branch br) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewBranch(?,?,?)}");
        cStmt.setString(1, br.getName());
        cStmt.setString(2, br.getPhone());
        cStmt.setLong(3, br.getLocation());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Delete
    public static boolean deleteBranchById(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteBranchById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Update
    public static boolean UpdateBranch(long oldbranchId, Branch newBranch) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateBranch(?,?,?,?)}");
        cStmt.setLong(1, oldbranchId);
        cStmt.setString(2, newBranch.getName());
        cStmt.setString(3, newBranch.getPhone());
        cStmt.setLong(4, newBranch.getLocation());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Search
    public static ArrayList<Branch> SearchBranch(String name) throws SQLException {
        ArrayList<Branch> result = new ArrayList<Branch>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchBranch(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Branch(rset.getLong(1), rset.getString(2), rset.getString(3), rset.getLong(4)));
        }
        conn.close();
        return result;
    }
    
     
}


package database;

import entities.Categorie;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;

public class CategorieManipulations {
    
   //Add
    public static boolean addNewCategorie(Categorie cat) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewCategorie(?,?)}");
        cStmt.setString(1, cat.getName());
        cStmt.setString(2, cat.getDesc());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }  
 
 //Search
 public static ArrayList<Categorie> SearchCategorie(String name) throws SQLException {
        ArrayList<Categorie> result = new ArrayList<Categorie>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchCategorie(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Categorie(rset.getLong(1), rset.getString(2), rset.getString(3)));
        }
        conn.close();
        return result;
    }
 
     //Delete
    public static boolean deleteCategorie(String catgname) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteCategorie(?)}");
        cStmt.setString(1, catgname);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    
 //Update
    public static boolean UpdateCategorie(long oldcategorieId,Categorie newcategorie) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateCategorie(?,?,?)}");
        cStmt.setLong(1, oldcategorieId);
        cStmt.setString(2, newcategorie.getName());
        cStmt.setString(3, newcategorie.getDesc());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    //find a specific categorie "recherche d'un categorie fixe"
    public static Categorie getCategorieInfo(String catgname) throws SQLException {
        Categorie result = null;
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call getCategorieInfo(?)}");
        cStmt.setString(1, catgname);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result = new Categorie(rset.getInt(1), rset.getString(2), rset.getString(3));
        }
        conn.close();
        return result;
    }
    
    //searchUser by ID
    public static Categorie getCategorieInfobyID(int id) throws SQLException {
        Categorie result = null;
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call getCategorieInfobyID(?)}");
        cStmt.setInt(1, id);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result = new Categorie(rset.getInt(1), rset.getString(2), rset.getString(3));
        }
        conn.close();
        return result;
    }
   

}



package database;

import entities.Branch;
import java.sql.SQLException;
import entities.City;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

public class CityManipulations {
   
    ///Add
    public static boolean addNewCity(City cit) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewCity(?)}");
        cStmt.setString(1, cit.getName());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    ///Delete
    public static boolean deleteCityById(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteCityById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    ///Update
    public static boolean Updatecities(long oldCityId, City newCity) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call Updatecities(?,?)}");
        cStmt.setLong(1, oldCityId);
        cStmt.setString(2, newCity.getName());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    ///Search
    public static ArrayList<City> SearchCity(String name) throws SQLException {
        ArrayList<City> result = new ArrayList<City>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchCity(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new City((int) rset.getLong(1), rset.getString(2)));
        }
        conn.close();
        return result;
    }
    
    
    
}


package database;
import java.sql.*;
public class ConnectionManager {
//CREATE USER 'locker'@'localhost' IDENTIFIED BY 'locker';
//GRANT ALL PRIVILEGES ON *.* TO 'locker'@'localhost';
    private static String  mySQLurl = "jdbc:mysql://localhost:3306/stocks";
    private static String mySQLuser = "admin";
    private static String mySQLpassword = "admin";

    public static Connection connectToMySQL() {
        Connection con = null;
        try {
            try {
                Class.forName("com.mysql.jdbc.Driver");
            } catch (ClassNotFoundException ex) {
                System.out.println("Exception :" + ex.getMessage());
            }
            con = DriverManager.getConnection(mySQLurl, mySQLuser, mySQLpassword);
            
        } catch (Exception ex) {
            System.out.println("Exception :" + ex.getMessage());
        }
        return con;
    }
}



package database;

import entities.Department;
import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

public class DepartmentManipulations {
  
    //Add
        public static boolean addNewDepartment(Department dep) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewDepartment(?,?,?)}");
        cStmt.setString(1,dep.getName());
        cStmt.setString(2,dep.getPhone());
        cStmt.setLong(3, dep.getBranch_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Delete
        public static boolean deleteDepartmentById(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteDepartmentById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Update
    public static boolean UpdateDepartment(long olddepartmentId, Department newDepartment) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateDepartment(?,?,?,?)}");
        cStmt.setLong(1, olddepartmentId);
        cStmt.setString(2, newDepartment.getName());
        cStmt.setString(3, newDepartment.getPhone());
        cStmt.setLong(4, newDepartment.getBranch_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    //Search
    public static ArrayList<Department> Searchdepartment(String name) throws SQLException {
        ArrayList<Department> result = new ArrayList<Department>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call Searchdepartment(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Department(rset.getLong(1), rset.getString(2), rset.getString(3), rset.getLong(4)));
        }
        conn.close();
        return result;
    }
    
    
}



package database;

import entities.Driving;
import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;


public class DrivingManipulations {
   
    //Add
        public static boolean addNewDriving(Driving driv) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewDriving(?,?,?,?)}");
        cStmt.setLong(1,driv.getVehicule_id());
        cStmt.setLong(2,driv.getEmployee_id());
        cStmt.setString(3,driv.getDate());
        cStmt.setString(4,driv.getDesc());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Delete
        public static boolean deleteDriving(long v,long e) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteDriving(?,?)}");
        cStmt.setLong(1, v);
        cStmt.setLong(2,e);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Update
    public static boolean UpdateDriving(long oldvehiculeId,long oldemployeeId,String olddate, Driving newDriving) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateDriving(?,?,?,?)}");
        cStmt.setLong(1, oldvehiculeId);
        cStmt.setLong(2, oldemployeeId);
        cStmt.setString(3, olddate);
        cStmt.setString(4, newDriving.getDesc());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
     //Search
    public static ArrayList<Driving> SearchDriving(String date) throws SQLException {
        ArrayList<Driving> result = new ArrayList<Driving>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchDriving(?)}");
        cStmt.setString(1, date);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
         result.add(new Driving(rset.getLong(1), rset.getLong(2), rset.getString(3), rset.getString(4)));
        }
        conn.close();
        return result;
    }
        
}



package database;

import entities.Employee;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class EmployeeManipulations {
 
    //Add
        public static boolean addNewEmployee(Employee emp) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewEmployee(?,?,?,?,?,?,?,?,?)}");
        cStmt.setString(1,emp.getName());
        cStmt.setString(2,emp.getAdress());
        cStmt.setString(3,emp.getPhone());
        cStmt.setString(4,emp.getEmail());
        cStmt.setLong(5, emp.getRoom_id());
        cStmt.setLong(6, emp.getEmployee_type_id());
        cStmt.setLong(7, emp.getBranch_id());
        cStmt.setLong(8, emp.getDepartment_id());
        cStmt.setLong(9, emp.getStock_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Delete
        public static boolean deleteEmployeeById(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteEmployeeById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Update
    public static boolean UpdateEmployee(long oldemployeeId, Employee newEmployee) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateEmployee(?,?,?,?,?,?,?,?,?,?)}");
        cStmt.setLong(1, oldemployeeId);
        cStmt.setString(2,newEmployee.getName());
        cStmt.setString(3,newEmployee.getAdress());
        cStmt.setString(4,newEmployee.getPhone());
        cStmt.setString(5,newEmployee.getEmail());
        cStmt.setLong(6,newEmployee.getRoom_id());
        cStmt.setLong(7,newEmployee.getEmployee_type_id());
        cStmt.setLong(8,newEmployee.getBranch_id());
        cStmt.setLong(9,newEmployee.getDepartment_id());
        cStmt.setLong(10,newEmployee.getStock_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    //Search
    public static ArrayList<Employee> SearchEmployee(String name) throws SQLException {
        ArrayList<Employee> result = new ArrayList<Employee>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchEmployee(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Employee(rset.getLong(1), rset.getString(2), rset.getString(3),
                                                    rset.getString(4), rset.getString(5),
                rset.getLong(6),rset.getLong(7),rset.getLong(8),rset.getLong(9),rset.getLong(10)));
        }
        conn.close();
        return result;
    }
   
}



package database;

import entities.Department;
import entities.EmployeeType;
import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;


public class EmployeeTypeManipulations {
    
//Add
        public static boolean addNewEmployeetype(EmployeeType emptyp) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewEmployeetype(?,?)}");
        cStmt.setString(1,emptyp.getName_type());
        cStmt.setString(2,emptyp.getDesc_type());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Delete
        public static boolean deleteEmployeetype(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteEmployeeTypeById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Update
    public static boolean UpdateEmployeetype(long oldEmployeeTypeId, EmployeeType newEmployeeType) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateEmployeetype(?,?,?)}");
        cStmt.setLong(1, oldEmployeeTypeId);
        cStmt.setString(2, newEmployeeType.getName_type());
        cStmt.setString(3, newEmployeeType.getDesc_type());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    //Search
    public static ArrayList<EmployeeType> SearchEmployeetype(String name_type) throws SQLException {
        ArrayList<EmployeeType> result = new ArrayList<EmployeeType>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchEmployeetype(?)}");
        cStmt.setString(1, name_type);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new EmployeeType(rset.getLong(1), rset.getString(2), rset.getString(3)));
        }
        conn.close();
        return result;
    }
    
        
    
}



package database;

import entities.Invoice;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class InvoiceManipulations {
 
    //Add
        public static boolean addNewInvoice(Invoice inv) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewInvoice(?,?,?,?,?,?,?,?,?)}");
        cStmt.setString(1,inv.getName());
        cStmt.setString(2,inv.getDate());
        cStmt.setLong(3,inv.getDisc());
        cStmt.setLong(4,inv.getStock_id());
        cStmt.setLong(5,inv.getSupplier_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Delete
        public static boolean deleteInvoiceById(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteInvoiceById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Update
    public static boolean UpdateInvoice(long oldinvId, Invoice newInvoice) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateInvoice(?,?,?,?,?,?)}");
        cStmt.setLong(1, oldinvId);
        cStmt.setString(2,newInvoice.getName());
        cStmt.setString(3,newInvoice.getDate());
        cStmt.setLong(4,newInvoice.getDisc());
        cStmt.setLong(5,newInvoice.getStock_id());
        cStmt.setLong(6,newInvoice.getSupplier_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    //Search
    public static ArrayList<Invoice> SearchInvoice(String name) throws SQLException {
        ArrayList<Invoice> result = new ArrayList<Invoice>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchInvoice(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Invoice(rset.getLong(1), rset.getString(2), rset.getString(3),
                                   rset.getLong(4),rset.getLong(5),rset.getLong(6)));
        }
        conn.close();
        return result;
    }
    
    
    
    
}



package database;

import entities.InvoiceProduct;
import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

public class InvoiceProductManipulations {
  
//Add
        public static boolean addNewInvoiceProduct(InvoiceProduct invprod) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewInvoiceProduct(?,?,?,?,?,?)}");
        cStmt.setLong(1,invprod.getInvoice_id());
        cStmt.setLong(2,invprod.getProduct_id());
        cStmt.setString(3,invprod.getDate());
        cStmt.setLong(4,invprod.getPriceunite());
        cStmt.setLong(5,invprod.getQt());
        cStmt.setLong(6,invprod.getDisc());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Delete
        public static boolean deleteInvoiceProduct(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteInvoiceProduct(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Update
    public static boolean UpdateInvoiceProduct(long oldproductid,long oldinvoiceid,
                   String oldinvproddate, InvoiceProduct newInvoiceProduct) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateInvoiceProduct(?,?,?,?,?,?)}");
        cStmt.setLong(1, oldproductid);
        cStmt.setLong(2,oldinvoiceid);
        cStmt.setString(3, oldinvproddate);
        cStmt.setLong(4,newInvoiceProduct.getPriceunite());
        cStmt.setLong(5,newInvoiceProduct.getQt());
        cStmt.setLong(6,newInvoiceProduct.getDisc());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    //Search
    public static ArrayList<InvoiceProduct> SearchInvoiceProduct(String name) throws SQLException {
        ArrayList<InvoiceProduct> result = new ArrayList<InvoiceProduct>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchInvoiceProduct(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new InvoiceProduct(rset.getLong(1), rset.getLong(2), rset.getString(3),
                                                rset.getLong(4), rset.getLong(5),rset.getLong(6)));
        }
        conn.close();
        return result;
    }
 }



package database;

import entities.Location;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class LocationManipulations {
    //Add
        public static boolean addNewLocation(Location loc) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewLocation(?,?)}");
        cStmt.setString(1,loc.getName());
        cStmt.setLong(2,loc.getCity_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Delete
        public static boolean deleteLocationById(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteLocationById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
        
    //Update
    public static boolean UpdateLocation(long oldLocationId, Location newLocation) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateLocation(?,?,?)}");
        cStmt.setLong(1, oldLocationId);
        cStmt.setString(2,newLocation.getName());
        cStmt.setLong(3,newLocation.getCity_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    //Search
    public static ArrayList<Location> SearchLocation(String name) throws SQLException {
        ArrayList<Location> result = new ArrayList<Location>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchLocation(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Location(rset.getLong(1), rset.getString(2), rset.getLong(3)));
        }
        conn.close();
        return result;
    }
}



package database;

import entities.Product;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class ProductManipulations {
 
//Add
        public static boolean addNewProduct(Product prod) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewProduct(?,?)}");
        cStmt.setString(1,prod.getName());
        cStmt.setLong(2,prod.getCategorie_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Delete
    public static boolean deleteProduct(String name) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteProduct(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }    
            
    //Update
    public static boolean UpdateProduct(long oldProductId, Product newProduct) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateProduct(?,?,?)}");
        cStmt.setLong(1, oldProductId);
        cStmt.setString(2,newProduct.getName());
        cStmt.setLong(3,newProduct.getCategorie_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
    //Search
    public static ArrayList<Product> SearchProduct(String productname) throws SQLException {
        ArrayList<Product> result = new ArrayList<Product>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchProduct(?)}");
        cStmt.setString(1, productname);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Product(rset.getLong(1), rset.getString(2), rset.getLong(3)));
        }
        conn.close();
        return result;
    }
    
    //find a specific user "recherche d'un user fixe"
    public static Product getProductInfo(String name) throws SQLException {
        Product result = null;
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call getProductInfo(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result = new Product(rset.getLong(1), rset.getString(2), rset.getLong(3));
        }
        conn.close();
        return result;
    }
    
    //searchUser by ID
    public static Product getProductInfobyID(int id) throws SQLException {
        Product result = null;
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call getProductInfobyID(?)}");
        cStmt.setInt(1, id);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result = new Product(rset.getLong(1), rset.getString(2), rset.getLong(3));
        }
        conn.close();
        return result;
    }
    
       
}



package database;

import entities.ProductRoom;
import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

public class ProductRoomManipulations {
 //Add
        public static boolean addNewProductRoom(ProductRoom prodroom) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewProductRoom(?,?,?,?)}");
        cStmt.setLong(1,prodroom.getProduct_id());
        cStmt.setLong(2,prodroom.getRoom_id());
        cStmt.setString(3,prodroom.getDate());
        cStmt.setLong(4,prodroom.getQt());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Delete
        public static boolean deleteProductRoom(long prodid,long roomid,String date,Long qt) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteProductRoom(?,?,?)}");
        cStmt.setLong(1, prodid);
        cStmt.setLong(2,roomid);
        cStmt.setString(3,date);
        cStmt.setLong(4,qt);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Update
    public static boolean UpdateProductRoom(long oldprodid,long oldroomid,String olddate,
                                                ProductRoom newProductRoom) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateProductRoom(?,?,?,?)}");
        cStmt.setLong(1, oldprodid);
        cStmt.setLong(2, oldroomid);
        cStmt.setString(3, olddate);
        cStmt.setLong(4, newProductRoom.getQt());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
     //Search
    public static ArrayList<ProductRoom> SearchProductRoom(String date) throws SQLException {
        ArrayList<ProductRoom> result = new ArrayList<ProductRoom>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchDriving(?)}");
        cStmt.setString(1, date);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
         result.add(new ProductRoom(rset.getLong(1), rset.getLong(2), rset.getString(3), rset.getLong(4)));
        }
        conn.close();
        return result;
    }
    
}



package database;

import entities.ProductSupplier;
import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

public class ProductSupplierManipulations {
 
    //Add
        public static boolean addNewProductSupplier(ProductSupplier prodsup) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewProductSupplier(?,?,?,?)}");
        cStmt.setLong(1,prodsup.getProduct_id());
        cStmt.setLong(2,prodsup.getSupplier_id());
        cStmt.setString(3,prodsup.getDate());
        cStmt.setLong(4,prodsup.getPrice_unite());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Delete
        public static boolean deleteProductSupplier(long prodid,long supid,String date,Long priceunit) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteProductSupplier(?,?,?)}");
        cStmt.setLong(1, prodid);
        cStmt.setLong(2,supid);
        cStmt.setString(3,date);
        cStmt.setLong(4,priceunit);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Update
    public static boolean UpdateProductSupplier(long oldprodid,long oldsupid,String olddate,
                                                        long priceunit ) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateProductSupplier(?,?,?,?)}");
        cStmt.setLong(1, oldprodid);
        cStmt.setLong(2, oldsupid);
        cStmt.setString(3, olddate);
        cStmt.setLong(2, priceunit);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
     //Search
    public static ArrayList<ProductSupplier> SearchProductSupplier(String date) throws SQLException {
        ArrayList<ProductSupplier> result = new ArrayList<ProductSupplier>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchProductSupplier(?)}");
        cStmt.setString(1, date);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
         result.add(new ProductSupplier(rset.getLong(1), rset.getLong(2), rset.getString(3), rset.getLong(4)));
        }
        conn.close();
        return result;
    }
    
    
}



package database;

import entities.Room;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class RoomManipulations {
 
    //Add
    public static boolean addNewRoomh(Room ro) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewRoomh(?,?,?)}");
        cStmt.setString(1, ro.getName());
        cStmt.setString(2, ro.getPhone());
        cStmt.setLong(3, ro.getDepartment_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Delete
    public static boolean deleteRomById(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteRomById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Update
    public static boolean updateRoom(long oldbranchId, Room newRoom) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call updateRoom(?,?,?,?)}");
        cStmt.setLong(1, oldbranchId);
        cStmt.setString(2, newRoom.getName());
        cStmt.setString(3, newRoom.getPhone());
        cStmt.setLong(4, newRoom.getDepartment_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Search
    public static ArrayList<Room> SearchRoom(String name) throws SQLException {
        ArrayList<Room> result = new ArrayList<Room>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchRoom(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Room(rset.getLong(1), rset.getString(2), rset.getString(3), rset.getLong(4)));
        }
        conn.close();
        return result;
    }
    
     
}



package database;

import entities.Stock;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class StockManipulations {
 
    //Add
    public static boolean addNewStock(Stock ro) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewStock(?,?,?)}");
        cStmt.setString(1, ro.getName());
        cStmt.setString(2, ro.getPhone());
        cStmt.setLong(3, ro.getBranch_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Delete
    public static boolean deleteStockById(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteStockById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Update
    public static boolean UpdateStock(long oldstockId, Stock newStock) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateStock(?,?,?,?)}");
        cStmt.setLong(1, oldstockId);
        cStmt.setString(2, newStock.getName());
        cStmt.setString(3, newStock.getPhone());
        cStmt.setLong(4, newStock.getBranch_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Search
    public static ArrayList<Stock> SearchStock(String name) throws SQLException {
        ArrayList<Stock> result = new ArrayList<Stock>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchStock(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Stock(rset.getLong(1), rset.getString(2), rset.getString(3), rset.getLong(4)));
        }
        conn.close();
        return result;
    }
    
     
    
}



package database;

import entities.StockProduct;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;


public class StockProductManipulations {
 //Add
        public static boolean addNewStockProduct(StockProduct stockprod) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewStockProduct(?,?,?,?,?)}");
        cStmt.setLong(1,stockprod.getStock_id());
        cStmt.setLong(2,stockprod.getProduct_id());
        cStmt.setString(3,stockprod.getDate());
        cStmt.setLong(4,stockprod.getQt());
        cStmt.setString(5,stockprod.getFlag_min_qt());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Delete
        public static boolean deleteStockProduct(long stockid,long productid,String date,long qt,String flagminqt) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteStockProduct(?,?,?,?,?)}");
        cStmt.setLong(1, stockid);
        cStmt.setLong(2,productid);
        cStmt.setString(3,date);
        cStmt.setLong(4,qt);
        cStmt.setString(5,flagminqt);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Update
    public static boolean UpdateStockProduct(long oldstockid,long oldproductid,String olddate,
                                                StockProduct newStockProduct) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateStockProduct(?,?,?,?,?)}");
        cStmt.setLong(1, oldstockid);
        cStmt.setLong(2, oldproductid);
        cStmt.setString(3, olddate);
        cStmt.setLong(4, newStockProduct.getQt());
        cStmt.setString(5, newStockProduct.getFlag_min_qt());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
     //Search
    public static ArrayList<StockProduct> SearchStockProduct(String date) throws SQLException {
        ArrayList<StockProduct> result = new ArrayList<StockProduct>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchStockProduct(?)}");
        cStmt.setString(1, date);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
         result.add(new StockProduct(rset.getLong(1), rset.getLong(2), rset.getString(3), rset.getLong(4),rset.getString(5)));
        }
        conn.close();
        return result;
    }
       
}



package database;

import entities.Supplier;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class SupplierManipulations {
  
    //Add
    public static boolean addNewSupplier(Supplier sup) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewSupplier(?,?,?,?)}");
        cStmt.setString(1, sup.getName());
        cStmt.setString(2, sup.getPhone());
        cStmt.setString(3, sup.getAdress());
        cStmt.setString(4, sup.getEmail());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Delete
    //public static boolean deleteSupplierById(long x) throws SQLException {
    //    Connection conn = ConnectionManager.connectToMySQL();
    //    CallableStatement cStmt = conn.prepareCall("{call deleteSupplierById(?)}");
    //    cStmt.setLong(1, x);
    //    ResultSet rset = cStmt.executeQuery();
    //    rset.next();
    //    boolean result = (rset.getInt(1) == 1);
    //    conn.close();
    //    return result;
    //}
    
    //Delete
    public static boolean deleteSupplier(String username) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteSupplier(?)}");
        cStmt.setString(1, username);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
   
    //Update
    public static boolean UpdateSupplier(long oldsupId, Supplier newSupplier) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateSupplier(?,?,?,?,?)}");
        cStmt.setLong(1, oldsupId);
        cStmt.setString(2, newSupplier.getName());
        cStmt.setString(3, newSupplier.getPhone());
        cStmt.setString(4, newSupplier.getAdress());
        cStmt.setString(5, newSupplier.getEmail());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Search
    public static ArrayList<Supplier> SearchSupplier(String name) throws SQLException {
        ArrayList<Supplier> result = new ArrayList<Supplier>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchSupplier(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Supplier(rset.getLong(1), rset.getString(2), rset.getString(3), rset.getString(4),rset.getString(5)));
        }
        conn.close();
        return result;
    }
    
   
    //find a specific user "recherche d'un user fixe"
    public static Supplier getSupplierInfo(String suppliername) throws SQLException {
        Supplier result = null;
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call getSupplierInfo(?)}");
        cStmt.setString(1, suppliername);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result = new Supplier(rset.getInt(1), rset.getString(2), rset.getString(3), rset.getString(4), rset.getString(5));
        }
        conn.close();
        return result;
    }
    
    //searchUser by ID
    public static Supplier getSupplierInfobyID(int id) throws SQLException {
        Supplier result = null;
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call getSupplierInfobyID(?)}");
        cStmt.setInt(1, id);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result = new Supplier(rset.getInt(1), rset.getString(2), rset.getString(3), rset.getString(4), rset.getString(5));
        }
        conn.close();
        return result;
    }
    
        
}



package database;

import entities.Transfer;
import java.sql.SQLException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

public class TransferManipulations {
 
    //Add
        public static boolean addNewTransfer(Transfer trans) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewTransfer(?,?,?,?)}");
        cStmt.setLong(1,trans.getStock_id());
        cStmt.setLong(2,trans.getVehicule_id());
        cStmt.setLong(3,trans.getProduct_id());
        cStmt.setString(4,trans.getDate());
        cStmt.setLong(5,trans.getQt());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Delete
        public static boolean deleteTransfer(long stockid,long vehiculeid,long productid,
                                                String date,Long qt) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteTransfer(?,?,?,?,?)}");
        cStmt.setLong(1, stockid);
        cStmt.setLong(2,vehiculeid);
        cStmt.setLong(3,productid);
        cStmt.setString(4,date);
        cStmt.setLong(5,qt);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
     
    //Update
    public static boolean UpdateTransfer(long oldstockid,long oldvehiculeid,long oldproductid,
                                                String olddate,long qt) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateTransfer(?,?,?,?)}");
        cStmt.setLong(1, oldstockid);
        cStmt.setLong(2, oldvehiculeid);
        cStmt.setLong(3, oldproductid);
        cStmt.setString(4, olddate);
        cStmt.setLong(5, qt);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }
    
     //Search
    public static ArrayList<Transfer> SearchTrasnfer(String date) throws SQLException {
        ArrayList<Transfer> result = new ArrayList<Transfer>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchTrasnfer(?)}");
        cStmt.setString(1, date);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
         result.add(new Transfer(rset.getLong(1), rset.getLong(2),rset.getLong(3), rset.getString(4), rset.getLong(5)));
        }
        conn.close();
        return result;
    }
    
    
}



package database;

import entities.User;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;

public class UserManipulations {

    //Add
    public static boolean addNewUsers(User us) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewUsers(?,?,?,?)}");
        cStmt.setString(1, us.getUsername());
        cStmt.setString(2, us.getUserpass());
        cStmt.setString(3, us.getValid());
        cStmt.setLong(4, us.getEmployee_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Delete
    public static boolean deleteUser(String username) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteUser(?)}");
        cStmt.setString(1, username);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Update
    public static boolean UpdateUsers(long olduserId, User newUser) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateUsers(?,?,?,?)}");
        cStmt.setLong(1, olduserId);
        cStmt.setString(2, newUser.getUsername());
        cStmt.setString(3, newUser.getUserpass());
        cStmt.setString(4, newUser.getValid());
        cStmt.setLong(5, newUser.getEmployee_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Search
    public static ArrayList<User> SearchUser(String username) throws SQLException {
        ArrayList<User> result = new ArrayList<User>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchUser(?)}");
        cStmt.setString(1, username);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new User(rset.getLong(1), rset.getString(2), rset.getString(3), rset.getString(4), rset.getLong(5)));
        }
        conn.close();
        return result;
    }

//find a specific user "recherche d'un user fixe"
    public static User getUserInfo(String username) throws SQLException {
        User result = null;
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call getUserInfo(?)}");
        cStmt.setString(1, username);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result = new User(rset.getInt(1), rset.getString(2), rset.getString(3), rset.getString(4), rset.getInt(5));
        }
        conn.close();
        return result;
    }
    //searchUser by ID
    public static User getUserInfobyID(int id) throws SQLException {
        User result = null;
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call getUserInfobyID(?)}");
        cStmt.setInt(1, id);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result = new User(rset.getInt(1), rset.getString(2), rset.getString(3), rset.getString(4), rset.getInt(5));
        }
        conn.close();
        return result;
    }

    public static boolean loginUser(User us) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call loginUser(?,?,?)}");
        cStmt.setString(1, us.getUsername());
        cStmt.setString(2, us.getUserpass());
        cStmt.registerOutParameter(3, Types.INTEGER);
        cStmt.execute();
        boolean result = (cStmt.getInt(3) == 1);
        conn.close();
        return result;
    }

}



package database;

import entities.Vehicule;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class VehiculeManipulations {
    
    //Add
    public static boolean addNewVehicle(Vehicule veh) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call addNewVehicle(?,?)}");
        cStmt.setString(1, veh.getName());
        cStmt.setLong(3, veh.getStock_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Delete
    public static boolean deleteVehicleById(long x) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call deleteVehicleById(?)}");
        cStmt.setLong(1, x);
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Update
    public static boolean UpdateVehicle(long oldvehiculeId, Vehicule newVehicule) throws SQLException {
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call UpdateVehicle(?,?,?)}");
        cStmt.setLong(1, oldvehiculeId);
        cStmt.setString(2, newVehicule.getName());
        cStmt.setLong(3, newVehicule.getStock_id());
        ResultSet rset = cStmt.executeQuery();
        rset.next();
        boolean result = (rset.getInt(1) == 1);
        conn.close();
        return result;
    }

    //Search
    public static ArrayList<Vehicule> SearchVehicle(String name) throws SQLException {
        ArrayList<Vehicule> result = new ArrayList<Vehicule>();
        Connection conn = ConnectionManager.connectToMySQL();
        CallableStatement cStmt = conn.prepareCall("{call SearchVehicle(?)}");
        cStmt.setString(1, name);
        ResultSet rset = cStmt.executeQuery();
        while (rset.next()) {
            result.add(new Vehicule(rset.getLong(1), rset.getString(2), rset.getLong(3)));
        }
        conn.close();
        return result;
    }
    
     
    
}
